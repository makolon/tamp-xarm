(define (domain xarm-assembly)
  (:requirements :strips :equality)
  (:predicates
    ; Static predicates
    (Robot ?r)
    (Block ?b)
    (Region ?s)
    (Pose ?b ?p)
    (Grasp ?r ?b ?g)
    (Conf ?q)
    (Traj ?t)
    (Contain ?b ?p ?s)
    (Kin ?r ?b ?p ?g ?q ?t)
    (Motion ?q1 ?q2 ?t)
    (CFree ?b1 ?p1 ?b2 ?p2)
    (Placeable ?b ?s)
    (Stackable ?b)
    (PoseCollision ?b1 ?p1 ?b2 ?p2)
    (TrajCollision ?t ?b2 ?p2)

    (BlockContain ?bu ?pu ?bl ?pl)
    (SFree ?b1 ?p1 ?b2 ?p2)
    (StackKin ?b ?q ?p ?g ?b2 ?p2)
    (CStack ?b1 ?p1 ?b2 ?p2)

    ; Fluent predicates
    (AtPose ?b ?p)
    (AtGrasp ?r ?b ?g)
    (AtConf ?r ?q)
    (Holding ?r ?b)
    (HandEmpty ?r)
    (CanMove ?r)

    ; Derived predicates
    (In ?b ?s)
    (UnsafePose ?b ?p)
    (UnsafeTraj ?t)
    (Graspable ?b)
    (CFreeTrajPose ?t ?o2 ?p2)
    (UnderBlock ?bl)
    (StackFree ?b ?p)
    (CollisionFree ?b ?p)
    (On ?b ?s)
    (SOn ?bu ?bl)
  )

  (:functions
    (Dist ?q1 ?q2)
    ; (Duration ?t)
    ; (PickCost ?r ?b)
  )

  (:action move
    :parameters (?r ?q1 ?q2 ?t)
    :precondition (and (Robot ?r) (Motion ?q1 ?q2 ?t) (Traj ?t)
                       (AtConf ?r ?q1) (CanMove ?r) (not (UnsafeTraj ?t)))
    :effect (and (AtConf ?r ?q2)
                 (not (AtConf ?r ?q1)) (not (CanMove ?r))
                 (increase (total-cost) (Dist ?q1 ?q2))))

  (:action pick
    :parameters (?r ?b ?p ?g ?q ?t)
    :precondition (and (Robot ?r)
                       (Kin ?r ?b ?p ?g ?q ?t)
                       (AtConf ?r ?q)
                       (AtPose ?b ?p)
                       (HandEmpty ?r)
                       (Traj ?t)
                       (Conf ?q)
                       (Grasp ?r ?b ?g))
    :effect (and (AtGrasp ?r ?b ?g)
                 (CanMove ?r)
                 (not (AtPose ?b ?p))
                 (not (HandEmpty ?r))
                 (increase (total-cost) 1)))

  (:action place
   :parameters (?r ?b ?p ?g ?q ?t)
   :precondition (and (Robot ?r)
                      (Kin ?r ?b ?p ?g ?q ?t)
                      (AtConf ?r ?q)
                      (AtGrasp ?r ?b ?g)
                      (Traj ?t)
                      (forall (?b2 ?p2)
                      (imply (and (Pose ?b2 ?p2)
                      (AtPose ?b2 ?p2))
                      (CFree ?b ?p ?b2 ?p2))))
   :effect (and (AtPose ?b ?p)
                (HandEmpty ?r)
                (CanMove ?r)
                (not (AtGrasp ?r ?b ?g))
                (Stackable ?b)
                (increase (total-cost) 1)))

  (:action stack
    :parameters (?r ?b ?p ?g ?q ?b2 ?p2 ?t)
    :precondition (and (Robot ?r)
                       (Kin ?r ?b ?p ?g ?q ?t)
                       (AtConf ?r ?q)
                       (AtGrasp ?r ?b ?g)
                       (Traj ?t)
                       (Stackable ?b2)
                       (Block ?b2)
                       (AtPose ?b2 ?p2)
                       (not (= ?b ?b2))
                       (CStack ?b ?p ?b2 ?p2))
    :effect (and (AtPose ?b ?p)
                 (HandEmpty ?r)
                 (CanMove ?r)
                 (not (AtGrasp ?r ?b ?g))
                 (SOn ?b ?b2)
                 (increase (total-cost) 1)))

  (:derived (In ?b ?s)
    (exists (?p) (and (Contain ?b ?p ?s)
                      (AtPose ?b ?p))))

  (:derived (Holding ?r ?b)
    (exists (?g) (and (Robot ?r)
                      (Grasp ?r ?b ?g)
                      (AtGrasp ?r ?b ?g))))

  (:derived (UnsafePose ?b1 ?p1)
   (exists (?b2 ?p2) (and (Pose ?b1 ?p1)
                          (Pose ?b2 ?p2)
                          (AtPose ?b2 ?p2)
                          (not (CFree ?b1 ?p1 ?b2 ?p2)))))

  (:derived (UnsafeTraj ?t)
    (exists (?o2 ?p2) (and (Traj ?t)
                           (Pose ?o2 ?p2)
                           (not (CFreeTrajPose ?t ?o2 ?p2))
                           (AtPose ?o2 ?p2))))

  (:derived (On ?bu ?bl)
    (exists (?pu ?pl) (and (BlockContain ?bu ?pu ?bl ?pl)
                      (Block ?bu)
                      (Block ?bl)
                      (AtPose ?bu ?pu)
                      (AtPose ?bl ?pl)
                      (SOn ?bu ?bl))))
)