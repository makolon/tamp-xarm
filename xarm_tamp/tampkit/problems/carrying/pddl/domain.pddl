(define (domain stacking-tamp)
  (:requirements :strips :equality)
  (:predicates
    ; Static predicates
    (Arm ?a)
    (Object ?o)
    (Region ?r)
    (Pose ?o ?p)
    (Grasp ?o ?g)
    (Traj ?t)
    (Conf ?q)
    (Kin ?a ?o ?p ?g ?q ?t)
    (Motion ?a ?q1 ?t ?q2)
    (Graspable ?o)
    (Placeable ?o ?r)
    (TrajPoseCollision ?t ?o ?p)
    (TrajArmCollision ?t ?a ?q)
    (TrajGraspCollision ?t ?a ?o ?g)
    (CFreeTrajPose ?t ?o ?p)
    (CFreePosePose ?o1 ?p1 ?o2 ?p2)
    (CFreeApproachPose ?o1 ?p1 ?g ?o2 ?p2)

    ; Fluent predicates
    (AtPose ?o ?p)
    (AtGrasp ?a ?o ?g)
    (AtConf ?a ?q)
    (HandEmpty ?a)
    (Placed ?o)
    (Supported ?o ?p ?r)

    ; Derived predicates
    (On ?o ?r)
    (Holding ?a ?o)
    (UnsafePose ?o ?p)
    (UnsafeApproach ?o ?p ?g)
    (UnsafeTraj ?t)
  )

  (:functions
    (MoveCost ?t)
    (PickCost)
    (PlaceCost)
  )

  (:action move
    :parameters (?a ?q1 ?q2 ?t)
    :precondition (and (Motion ?a ?q1 ?t ?q2)
                       (AtConf ?a ?q1)
                       (not (UnSafeTraj ?t)))
    :effect (and (AtConf ?a ?q2)
                 (not (AtConf ?a ?q1))
                 (not (= ?q1 ?q2))
                 (increase (total-cost) (MoveCost ?t)))
  )

  (:action pick
    :parameters (?a ?o ?p ?g ?q ?t)
    :precondition (and (Kin ?a ?o ?p ?g ?q ?t)
                       (HandEmpty ?a)
                       (Graspable ?o)
                       ; (AtConf ?a ?q)
                       (AtPose ?o ?p)
                       (not (UnsafeApproach ?o ?p ?g))
                       (not (UnsafeTraj ?t)))
    :effect (and (AtGrasp ?a ?o ?g)
                 (not (AtPose ?o ?p))
                 (not (HandEmpty ?a))
                 (increase (total-cost) (PickCost)))
  )

  (:action place
    :parameters (?a ?o1 ?r ?p ?g ?q ?t)
    :precondition (and (Kin ?a ?o1 ?p ?g ?q ?t)
                       ; (AtConf ?a ?q)
                       (AtGrasp ?a ?o1 ?g)
                       (Placeable ?o1 ?r)
                       (not (HandEmpty ?a))
                       (not (UnsafePose ?o1 ?p))
                       (not (UnsafeApproach ?o1 ?p ?g))
                       (not (UnsafeTraj ?t)))
    :effect (and (AtPose ?o1 ?p)
                 (Placed ?o1)
                 (HandEmpty ?a)
                 (increase (total-cost) (PlaceCost)))
  )

  (:derived (On ?o1 ?o2)
    (exists (?p) (and (Placed ?o1)
                      (Supported ?o1 ?p ?o2)
                      (AtPose ?o1 ?p)))
  )

  (:derived (Holding ?a ?o)
    (exists (?g) (and (Arm ?a) (Grasp ?o ?g)
                      (AtGrasp ?a ?o ?g)))
  )

  (:derived (UnsafePose ?o ?p)
    (exists (?o2 ?p2) (and (Pose ?o ?p) (Pose ?o2 ?p2)
                           (not (= ?o ?o2))
                           (not (CFreePosePose ?o ?p ?o2 ?p2))
                           (AtPose ?o2 ?p2)))
  )

  (:derived (UnsafeApproach ?o ?p ?g)
    (exists (?o2 ?p2) (and (Grasp ?o ?g)
                           (Pose ?o ?p)
                           (Pose ?o2 ?p2)
                           (not (= ?o ?o2))
                           (not (CFreeApproachPose ?o ?p ?g ?o2 ?p2))
                           (AtPose ?o2 ?p2)))
  )

  (:derived (UnsafeTraj ?t)
    (exists (?o ?p) (and (Traj ?t)
                         (Pose ?o ?p)
                         (not (CFreeTrajPose ?t ?o ?p))
                         (AtPose ?o ?p)))
  )
)